
  reg htif_out_ready;
  wire htif_in_valid;
  wire [`HTIF_WIDTH-1:0] htif_in_bits;
  wire htif_in_ready, htif_out_valid;
  wire [`HTIF_WIDTH-1:0] htif_out_bits;
  wire htif_out_stats;

  wire mem_bk_in_valid;
  wire mem_bk_out_valid;
  wire mem_bk_out_ready;
  wire [`HTIF_WIDTH-1:0] mem_in_bits;

  wire ar_valid_0;
  reg ar_ready_0;
  wire [`MEM_ADDR_BITS-1:0] ar_addr_0;
  wire [`MEM_ID_BITS-1:0] ar_id_0;
  wire [2:0] ar_size_0;
  wire [7:0] ar_len_0;

  wire aw_valid_0;
  reg aw_ready_0;
  wire [`MEM_ADDR_BITS-1:0] aw_addr_0;
  wire [`MEM_ID_BITS-1:0] aw_id_0;
  wire [2:0] aw_size_0;
  wire [7:0] aw_len_0;

  wire w_valid_0;
  reg w_ready_0;
  wire [`MEM_STRB_BITS-1:0] w_strb_0;
  wire [`MEM_DATA_BITS-1:0] w_data_0;
  wire w_last;

  reg r_valid_0;
  wire r_ready_0;
  reg [1:0] r_resp_0;
  reg [`MEM_ID_BITS-1:0] r_id_0;
  reg [`MEM_DATA_BITS-1:0] r_data_0;
  reg r_last_0;

  reg b_valid_0;
  wire b_ready_0;
  reg [1:0] b_resp_0;
  reg [`MEM_ID_BITS-1:0] b_id_0;


  wire htif_clk;
  wire htif_in_valid_delay;
  wire htif_in_ready_delay;
  wire [`HTIF_WIDTH-1:0] htif_in_bits_delay;

  wire htif_out_valid_delay;
  wire htif_out_ready_delay;
  wire [`HTIF_WIDTH-1:0] htif_out_bits_delay;

  wire htif_out_stats_delay;

  wire mem_bk_out_ready_delay;
  wire mem_bk_in_valid_delay;
  wire mem_bk_out_valid_delay;

  assign #0.1 htif_in_valid_delay = htif_in_valid;
  assign #0.1 htif_in_ready = htif_in_ready_delay;
  assign #0.1 htif_in_bits_delay = htif_in_bits;

  assign #0.1 htif_out_valid = htif_out_valid_delay;
  assign #0.1 htif_out_ready_delay = htif_out_ready;
  assign #0.1 htif_out_bits = htif_out_bits_delay;

  assign #0.1 htif_out_stats = htif_out_stats_delay;

  assign #0.1 mem_bk_out_ready_delay = mem_bk_out_ready;
  assign #0.1 mem_bk_in_valid_delay = mem_bk_in_valid;
  assign #0.1 mem_bk_out_valid = mem_bk_out_valid_delay;

  wire ar_valid_delay_0;
  wire ar_ready_delay_0;
  wire [`MEM_ADDR_BITS-1:0] ar_addr_delay_0;
  wire [`MEM_ID_BITS-1:0] ar_id_delay_0;
  wire [2:0] ar_size_delay_0;
  wire [7:0] ar_len_delay_0;

  wire aw_valid_delay_0;
  wire aw_ready_delay_0;
  wire [`MEM_ADDR_BITS-1:0] aw_addr_delay_0;
  wire [`MEM_ID_BITS-1:0] aw_id_delay_0;
  wire [2:0] aw_size_delay_0;
  wire [7:0] aw_len_delay_0;

  wire w_valid_delay_0;
  wire w_ready_delay_0;
  wire [`MEM_STRB_BITS-1:0] w_strb_delay_0;
  wire [`MEM_DATA_BITS-1:0] w_data_delay_0;
  wire w_last_delay_0;

  wire r_valid_delay_0;
  wire r_ready_delay_0;
  wire [1:0] r_resp_delay_0;
  wire [`MEM_ID_BITS-1:0] r_id_delay_0;
  wire [`MEM_DATA_BITS-1:0] r_data_delay_0;
  wire r_last_delay_0;

  wire b_valid_delay_0;
  wire b_ready_delay_0;
  wire [1:0] b_resp_delay_0;
  wire [`MEM_ID_BITS-1:0] b_id_delay_0;

  assign #0.1 ar_valid_0 = ar_valid_delay_0;
  assign #0.1 ar_ready_delay_0 = ar_ready_0;
  assign #0.1 ar_addr_0 = ar_addr_delay_0;
  assign #0.1 ar_id_0 = ar_id_delay_0;
  assign #0.1 ar_size_0 = ar_size_delay_0;
  assign #0.1 ar_len_0 = ar_len_delay_0;

  assign #0.1 aw_valid_0 = aw_valid_delay_0;
  assign #0.1 aw_ready_delay_0 = aw_ready_0;
  assign #0.1 aw_addr_0 = aw_addr_delay_0;
  assign #0.1 aw_id_0 = aw_id_delay_0;
  assign #0.1 aw_size_0 = aw_size_delay_0;
  assign #0.1 aw_len_0 = aw_len_delay_0;

  assign #0.1 w_valid_0 = w_valid_delay_0;
  assign #0.1 w_ready_delay_0 = w_ready_0;
  assign #0.1 w_strb_0 = w_strb_delay_0;
  assign #0.1 w_data_0 = w_data_delay_0;
  assign #0.1 w_last_0 = w_last_delay_0;

  assign #0.1 r_valid_delay_0 = r_valid_0;
  assign #0.1 r_ready_0 = r_ready_delay_0;
  assign #0.1 r_resp_delay_0 = r_resp_0;
  assign #0.1 r_id_delay_0 = r_id_0;
  assign #0.1 r_data_delay_0 = r_data_0;
  assign #0.1 r_last_delay_0 = r_last_0;

  assign #0.1 b_valid_delay_0 = b_valid_0;
  assign #0.1 b_ready_0 = b_ready_delay_0;
  assign #0.1 b_resp_delay_0 = b_resp_0;
  assign #0.1 b_id_delay_0 = b_id_0;


`ifdef FPGA
  assign mem_bk_out_valid_delay = 1'b0;
  assign htif_out_stats_delay = 1'b0;
  assign htif_clk = clk;
`endif

  test_bsg dut
  (
    .core_clk_i(clk),
    .io_clk_i(io_clk),

    .reset(reset),
    .gateway_async_reset_i(gateway_async_reset),
    .boot_done_o(boot_done),

    .io_mem_0_ar_valid (ar_valid_delay_0),
    .io_mem_0_ar_ready (ar_ready_delay_0),
    .io_mem_0_ar_bits_addr (ar_addr_delay_0),
    .io_mem_0_ar_bits_id (ar_id_delay_0),
    .io_mem_0_ar_bits_size (ar_size_delay_0),
    .io_mem_0_ar_bits_len (ar_len_delay_0),
    .io_mem_0_ar_bits_burst (),
    .io_mem_0_ar_bits_lock (),
    .io_mem_0_ar_bits_cache (),
    .io_mem_0_ar_bits_prot (),
    .io_mem_0_ar_bits_qos (),
    .io_mem_0_ar_bits_region (),
    .io_mem_0_ar_bits_user (),

    .io_mem_0_aw_valid (aw_valid_delay_0),
    .io_mem_0_aw_ready (aw_ready_delay_0),
    .io_mem_0_aw_bits_addr (aw_addr_delay_0),
    .io_mem_0_aw_bits_id (aw_id_delay_0),
    .io_mem_0_aw_bits_size (aw_size_delay_0),
    .io_mem_0_aw_bits_len (aw_len_delay_0),
    .io_mem_0_aw_bits_burst (),
    .io_mem_0_aw_bits_lock (),
    .io_mem_0_aw_bits_cache (),
    .io_mem_0_aw_bits_prot (),
    .io_mem_0_aw_bits_qos (),
    .io_mem_0_aw_bits_region (),
    .io_mem_0_aw_bits_user (),

    .io_mem_0_w_valid (w_valid_delay_0),
    .io_mem_0_w_ready (w_ready_delay_0),
    .io_mem_0_w_bits_strb (w_strb_delay_0),
    .io_mem_0_w_bits_data (w_data_delay_0),
    .io_mem_0_w_bits_last (w_last_delay_0),
    .io_mem_0_w_bits_user (),

    .io_mem_0_r_valid (r_valid_delay_0),
    .io_mem_0_r_ready (r_ready_delay_0),
    .io_mem_0_r_bits_resp (r_resp_delay_0),
    .io_mem_0_r_bits_id (r_id_delay_0),
    .io_mem_0_r_bits_data (r_data_delay_0),
    .io_mem_0_r_bits_last (r_last_delay_0),
    .io_mem_0_r_bits_user (1'b0),

    .io_mem_0_b_valid (b_valid_delay_0),
    .io_mem_0_b_ready (b_ready_delay_0),
    .io_mem_0_b_bits_resp (b_resp_delay_0),
    .io_mem_0_b_bits_id (b_id_delay_0),
    .io_mem_0_b_bits_user (1'b0),



`ifndef FPGA
    .io_host_clk(htif_clk),
    .io_host_clk_edge(),
    .io_host_debug_stats_csr(htif_out_stats_delay),

`ifdef MEM_BACKUP_EN
    .io_mem_backup_ctrl_en(1'b1),
`else
    .io_mem_backup_ctrl_en(1'b0),
`endif // MEM_BACKUP_EN
    .io_mem_backup_ctrl_in_valid(mem_bk_in_valid_delay),
    .io_mem_backup_ctrl_out_ready(mem_bk_out_ready_delay),
    .io_mem_backup_ctrl_out_valid(mem_bk_out_valid_delay),
`else
    .io_host_clk (),
    .io_host_clk_edge (),
    .io_host_debug_stats_csr (),

    .io_mem_backup_ctrl_en (1'b0),
    .io_mem_backup_ctrl_in_valid (1'b0),
    .io_mem_backup_ctrl_out_ready (1'b0),
    .io_mem_backup_ctrl_out_valid (),
`endif // FPGA

    .io_host_in_valid(htif_in_valid_delay),
    .io_host_in_ready(htif_in_ready_delay),
    .io_host_in_bits(htif_in_bits_delay),
    .io_host_out_valid(htif_out_valid_delay),
    .io_host_out_ready(htif_out_ready_delay),
    .io_host_out_bits(htif_out_bits_delay)
  );

  reg [31:0] channel_0 = 0;

  always @(posedge clk)
  begin
    if (reset || r_reset)
    begin
      ar_ready_0 <= 1'b0;
      aw_ready_0 <= 1'b0;
      w_ready_0 <= 1'b0;
      r_valid_0 <= 1'b0;
      r_resp_0 <= 2'b0;
      r_id_0 <= {`MEM_ID_BITS {1'b0}};
      r_data_0 <= {`MEM_DATA_BITS {1'b0}};
      r_last_0 <= 1'b0;
      b_valid_0 <= 1'b0;
      b_resp_0 <= 2'b0;
      b_id_0 <= {`MEM_ID_BITS {1'b0}};
    end
    else
    begin
      memory_tick
      (
        channel_0,
        ar_valid_0, ar_ready_0, ar_addr_0, ar_id_0, ar_size_0, ar_len_0,
        aw_valid_0, aw_ready_0, aw_addr_0, aw_id_0, aw_size_0, aw_len_0,
        w_valid_0, w_ready_0, w_strb_0, w_data_0, w_last_0,
        r_valid_0, r_ready_0, r_resp_0, r_id_0, r_data_0, r_last_0,
        b_valid_0, b_ready_0, b_resp_0, b_id_0
      );
    end
  end

  always @(posedge clk)
  begin
    if (verbose)
    begin
      if (ar_valid_0 && ar_ready_0)
      begin
        $fdisplay(stderr, "MC0: ar addr=%x", ar_addr_0);
      end
      if (aw_valid_0 && aw_ready_0)
      begin
        $fdisplay(stderr, "MC0: aw addr=%x", aw_addr_0);
      end
      if (w_valid_0 && w_ready_0)
      begin
        $fdisplay(stderr, "MC0: w data=%x", w_data_0);
      end
      if (r_valid_0 && r_ready_0)
      begin
        $fdisplay(stderr, "MC0: r data=%x", r_data_0);
      end
    end
  end
